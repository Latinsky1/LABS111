#include <SFML/Graphics.hpp>
#include <cmath>

int main()
{
    setlocale(LC_ALL, "Rus");

    // Создание окна
    sf::RenderWindow window(sf::VideoMode(1920, 1080), "SFML", sf::Style::Fullscreen);
    window.setFramerateLimit(60);

    // Начальная задержка
    sf::Time delay = sf::seconds(2);
    sf::Clock clock;

    // Создание фигур
    sf::CircleShape circle(50.f);
    circle.setFillColor(sf::Color::Red);
    circle.setPosition(100.f, 200.f); // Изменение позиции круга
    bool circleStopped = false;
    sf::Clock circleFlashClock; // Часы для мигания круга
    sf::Time circleFlashDelay = sf::seconds(0.5);

    sf::RectangleShape rectangle(sf::Vector2f(100.f, 50.f));
    rectangle.setFillColor(sf::Color::Green);
    rectangle.setPosition(600.f, 400.f); // Изменение позиции прямоугольника
    bool rectangleStopped = false;
    sf::Clock rectangleFlashClock; // Часы для мигания прямоугольника
    sf::Time rectangleFlashDelay = sf::seconds(0.5);

    sf::RectangleShape square(sf::Vector2f(100.f, 100.f)); // Создание квадрата
    square.setFillColor(sf::Color::Blue);
    square.setPosition(1100.f, 600.f); // Изменение позиции квадрата
    bool squareStopped = false;
    sf::Clock squareFlashClock; // Часы для мигания квадрата
    sf::Time squareFlashDelay = sf::seconds(0.5);

    // Основной цикл
    while (window.isOpen())
    {
        // Обработка событий
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // Обновление
        if (clock.getElapsedTime() > delay)
        {
            // Движение фигур
            if (!circleStopped)
                circle.move(0.f, -7.f);
            if (!rectangleStopped)
                rectangle.move(0.f, -5.f);
            if (!squareStopped)
                square.move(0.f, -10.f); // Движение квадрата

            // Остановка фигуры у верхней границы вплотную
            if (circle.getPosition().y <= 0.f)
            {
                circle.setPosition(circle.getPosition().x, 0.f);
                circleStopped = true;
            }

            if (rectangle.getPosition().y <= 0.f)
            {
                rectangle.setPosition(rectangle.getPosition().x, 0.f);
                rectangleStopped = true;
            }

            if (square.getPosition().y <= 0.f)
            {
                square.setPosition(square.getPosition().x, 0.f);
                squareStopped = true;
            }
        }

        // Отрисовка фигур
        window.clear();

        // Добавление новых фигур
        if (circleStopped) {
            float radius = 30.f + 30.f * std::sin(circleFlashClock.getElapsedTime().asSeconds() * 5); // "Пульсирование" радиуса круга
            sf::CircleShape newCircle(radius);
            newCircle.setFillColor(sf::Color::Cyan);
            newCircle.setPosition(circle.getPosition().x - radius + circle.getRadius(), circle.getPosition().y - radius + circle.getRadius()); // Установка позиции нового круга
            window.draw(newCircle);
        }

        if (rectangleStopped) {
            sf::Vector2f size = sf::Vector2f(100.f, 50.f) + sf::Vector2f(25.f * std::sin(rectangleFlashClock.getElapsedTime().asSeconds() * 5), 12.5f * std::sin(rectangleFlashClock.getElapsedTime().asSeconds() * 5)); // "Пульсирование" размеров прямоугольника
            sf::RectangleShape newRectangle(size);
            newRectangle.setFillColor(sf::Color::Cyan);
            newRectangle.setPosition(rectangle.getPosition().x - (newRectangle.getSize().x - rectangle.getSize().x) / 2.f, rectangle.getPosition().y + (rectangle.getSize().y - newRectangle.getSize().y) / 2.f); // Смещение позиции нового прямоугольника
            window.draw(newRectangle);
        }

        if (squareStopped) {
            sf::Vector2f size = sf::Vector2f(100.f, 100.f) + sf::Vector2f(25.f * std::sin(squareFlashClock.getElapsedTime().asSeconds() * 5), 25.f * std::sin(squareFlashClock.getElapsedTime().asSeconds() * 5)); // "Пульсирование" размеров квадрата
            sf::RectangleShape newSquare(size);
            newSquare.setFillColor(sf::Color::Cyan);
            newSquare.setPosition(square.getPosition().x - (newSquare.getSize().x - square.getSize().x) / 2.f, square.getPosition().y - (newSquare.getSize().y - square.getSize().y) / 2.f); // Смещение позиции нового квадрата
            window.draw(newSquare);
        }

        // Отрисовка старых фигур
        window.draw(circle);
        window.draw(rectangle);
        window.draw(square);

        window.display();
    }

    return 0;
}
